#lang racket
(provide (all-defined-out))

(define prefix '(y ch l n m g d t b ky kw w p pr cr br ng s h r th sm))
(define infix '(a u i o oo ai ee ae ia ea))
(define postfix '(h n m ng k h w b d ve t se th))

(define (pick lst)
  (string-upcase (symbol->string (list-ref lst (random (length lst))))))
(define (word)
  (let ((style (random 6)))
    (cond ((= style 0)
           (string-append (pick prefix) (pick infix)))
          ((= style 1)
           (string-append (pick infix) (pick postfix)))
          ((or (= style 2) (= style 3) (= style 4))
           (string-append (pick prefix) (pick infix) (pick postfix)))
          ((= style 5)
           (string-append (word) "-" (word))))))
(define (phrase)
  (string-join (for/list ((n (+ 2 (random 9))))
                 (word)) " "))
(define (sentence) (string-append (phrase) "."))
(define (question) (string-append (phrase) "?"))
(define (complex-sentence) (string-append (phrase) ", " (phrase) "."))
(define (complex-question) (string-append (phrase) ", " (phrase) "?"))
(define (stanza)
  (let ((size (add1 (random 5)))
        (types (list sentence question complex-sentence complex-question)))
    (for ((n size))
      (display ((list-ref types (random (length types)))))
      (newline))))
