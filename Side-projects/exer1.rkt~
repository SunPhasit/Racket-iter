;;;=== exer1.rkt === Status : unfinished
; Exercise 1.1
; Exercise 1.2
; Exercise 1.3
; Exercise 1.4
; Exercise 1.5

;;== Page 26 ==
; Exercise 1.1
#lang racket

10
; 10

(+ 5 3 4)
; 12

(- 9 1)
; 8

(/ 6 2)
; 3

(+ (* 2 4) (- 4 6))
; 6

(define a 3)
; (returns nothing)

(define b (+ a 1))
; (returns nothing)

(+ a b (* a b))
; 19

(= a b)
; #f

(if (and (> b a) (< b (* a b)))
      b
      a)
; 4

(cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
; 16

(+ 2 (if (> b a) b a))
; 6

(* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
; 16
;;== Page 27 ==
; Exercise 1.2

(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               4/5))))
   (* 3
      (- 6
         2)
      (- 2
         7)))
;-37/150

; Exercise 1.3
(define (sosq a b)
  (+ (* a a) (* b b)))
; (returns nothing)

(define (sosq-of-max a b c)       
  (cond ((and (>= a c) (>= b c)) (sosq a b))
        ((and (>= a b) (>= c b)) (sosq a c))
        (else (sosq b c))))
; (returns nothing)

; -Function test-
(sosq-of-max 3 4 5)
;41                     expected to get: 41

(sosq-of-max 2 3 3)
;18                     expected to get: 18

; Exercise 1.4

(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a
                    b))
; (returns nothing)
; -Obsevation-
; if b is positive (b > 0) will return a+b
; if b is not positive (b <= 0) will return a-b
; This function can be written as a+|b|

; Exercise 1.5

(define (p) (p))
(define (test x y)
  (if (= x 0) 0 y))
; (returns nothing)

;(test 0 (p))
; (infinite function loop)             expected to get: 0
; We can conclude that racket will evaluate '0' and 'p' at the same time
; When it evaluates 'p', It calls 'p' which will call 'p' continuosly
  
; Exercise 1.6
(define (sqrt x)
  (sqrt-iter 1.0 x))

;(define (new-if predicate then-c else-c)
;(define (sqrt-iter guess x)
; (new
